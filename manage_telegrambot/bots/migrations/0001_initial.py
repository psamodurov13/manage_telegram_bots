# Generated by Django 4.2.5 on 2023-10-07 08:27

from django.db import migrations, models
import django.db.models.deletion
import manage_telegrambot.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Actions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название действия')),
            ],
            options={
                'verbose_name': 'Действие',
                'verbose_name_plural': 'Действия',
            },
            bases=(manage_telegrambot.utils.CustomStr, models.Model),
        ),
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Используется только Вами, пользователи его не видят', max_length=255, verbose_name='Название бота')),
                ('token', models.CharField(help_text='Токен из BotFather', max_length=255, verbose_name='Token')),
                ('status', models.BooleanField(default=False, verbose_name='Включен')),
            ],
            options={
                'verbose_name': 'Бот',
                'verbose_name_plural': 'Боты',
            },
            bases=(manage_telegrambot.utils.CustomStr, models.Model),
        ),
        migrations.CreateModel(
            name='Buttons',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Это название видете только Вы', max_length=255, verbose_name='Название кнопки')),
                ('button_text', models.CharField(help_text='Введите текст, который будет отображаться внутри кнопки', max_length=255, verbose_name='Текст кнопки')),
                ('button_url', models.URLField(blank=True, help_text='Заполняется только при действии "переход по ссылке"', null=True, verbose_name='Ссылка')),
                ('action', models.ForeignKey(help_text='Для активации следующих полей нажмите кнопку "Сохранить и продолжить редактирование"', on_delete=django.db.models.deletion.CASCADE, related_name='buttons', to='bots.actions', verbose_name='Действие')),
            ],
            options={
                'verbose_name': 'Кнопка',
                'verbose_name_plural': 'Кнопки',
            },
            bases=(manage_telegrambot.utils.CustomStr, models.Model),
        ),
        migrations.CreateModel(
            name='CurrentSteps',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_step', models.CharField(help_text='Идентификатор поста, который должен быть отправлен следующим', max_length=255, verbose_name='Текущий шаг')),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_steps', to='bots.bot', verbose_name='Бот')),
            ],
            options={
                'verbose_name': 'Текущий шаг',
                'verbose_name_plural': 'Текущие шаги',
            },
            bases=(manage_telegrambot.utils.CustomStr, models.Model),
        ),
        migrations.CreateModel(
            name='PostType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название типа')),
            ],
            options={
                'verbose_name': 'Тип поста',
                'verbose_name_plural': 'Типы постов',
            },
            bases=(manage_telegrambot.utils.CustomStr, models.Model),
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название тега')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
            bases=(manage_telegrambot.utils.CustomStr, models.Model),
        ),
        migrations.CreateModel(
            name='Subscribers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.IntegerField(verbose_name='Telegram ID')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Фамилия')),
                ('username', models.CharField(blank=True, max_length=255, null=True, verbose_name='Username')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время подписки')),
                ('current_step', models.ManyToManyField(related_name='subscriber', to='bots.currentsteps', verbose_name='Текущий шаг')),
                ('tags', models.ManyToManyField(related_name='subscribers', to='bots.tags', verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Подписчик',
                'verbose_name_plural': 'Подписчики',
            },
            bases=(manage_telegrambot.utils.CustomStr, models.Model),
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, help_text='Текстовая часть сообщения', null=True, verbose_name='Текст поста')),
                ('emoji', models.CharField(blank=True, help_text='Emoji', max_length=25, null=True, verbose_name='Emoji')),
                ('photo', models.ImageField(blank=True, help_text='Загрузите фото файл в формате .jpg', null=True, upload_to='photo/', verbose_name='Фото файл')),
                ('audio', models.FileField(blank=True, help_text='Загрузите аудио файл в формате .ogg', null=True, upload_to='audio/', verbose_name='Аудио файл')),
                ('video', models.FileField(blank=True, help_text='Загрузите видео файл в формате .mp4', null=True, upload_to='video/', verbose_name='Видео файл')),
                ('count', models.CharField(help_text='Идентификатор, используется для указания следующего поста', max_length=255, unique=True, verbose_name='Идентификатор')),
                ('timer', models.IntegerField(blank=True, help_text='Заполняется в том случае, если данный пост должен отправляться через определенное время после предыдущего. Таймер указывается в секундах', null=True, verbose_name='Таймер')),
                ('time', models.TimeField(blank=True, help_text='Время отправки поста. Указывается в случае, если пост должен быть отправлен в определенное время после предыдущего поста', null=True, verbose_name='Время')),
                ('default_next_integer', models.CharField(blank=True, max_length=255, null=True, verbose_name='Идентификатор следующего поста')),
                ('add_tags', models.ManyToManyField(blank=True, help_text='Выберите теги, которые будут добавлены пользователю после отправки данного поста', related_name='posts', to='bots.tags', verbose_name='Добавляемые теги')),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='bots.bot', verbose_name='Бот')),
                ('buttons', models.ManyToManyField(related_name='posts', to='bots.buttons', verbose_name='Кнопки')),
                ('post_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='bots.posttype', verbose_name='Тип поста')),
            ],
            options={
                'verbose_name': 'Пост',
                'verbose_name_plural': 'Посты',
            },
            bases=(manage_telegrambot.utils.CustomStr, models.Model),
        ),
        migrations.CreateModel(
            name='Mailings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название рассылки')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Текст рассылки')),
                ('time', models.DateTimeField(verbose_name='Время и дата запуска рассылки')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='mailings/', verbose_name='Картинка')),
                ('audio', models.FileField(blank=True, null=True, upload_to='mailings/', verbose_name='Аудио')),
                ('video', models.FileField(blank=True, null=True, upload_to='mailings/', verbose_name='Видео')),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mailings', to='bots.tags', verbose_name='Тег')),
            ],
            options={
                'verbose_name': 'Рассылка',
                'verbose_name_plural': 'Рассылки',
            },
            bases=(manage_telegrambot.utils.CustomStr, models.Model),
        ),
        migrations.AddField(
            model_name='buttons',
            name='next_post',
            field=models.ForeignKey(blank=True, help_text='Заполняется только при действии "переход к следующему посту"', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='buttons_to_post', to='bots.post', verbose_name='Следующий пост'),
        ),
    ]
